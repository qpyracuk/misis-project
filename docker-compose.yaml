version: "3.9"
name: misis
services:
  # NGINX
  client:
    container_name: ${CLIENT_CONTAINER_NAME}
    hostname: ${CLIENT_HOSTNAME}
    image: nginx:1.24.0-bullseye
    ports:
      - ${HTTP_PORT}:${HTTP_PORT}
    environment:
      - NGINX_PORT=${HTTP_PORT}
      - NGINX_HOST=${DOMAIN}
    volumes:
      - ./services/client/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/client/www:/usr/share/nginx/html
    restart: unless-stopped
    command: [nginx-debug, "-g", "daemon off;"]
    depends_on:
      - server
      - postgres
      - cache
    networks:
      - app

  # СЕРВЕРНАЯ ЧАСТЬ САЙТА
  server:
    container_name: ${SERVER_CONTAINER_NAME}
    hostname: ${SERVER_HOSTNAME}
    build:
      context: ./services/server
      dockerfile: Dockerfile
      args:
        - RUN_MODE=${SERVER_RUN_MODE}

    restart: unless-stopped
    
    volumes:
      - ./services/server/bin:/app/bin
    environment:
      - REST_HTTP_PORT=${REST_HTTP_PORT}
      - REST_HTTPS_PORT=${REST_HTTPS_PORT}
      - CACHE_DB_HOSTNAME=${CACHE_DB_HOSTNAME}
      - CACHE_DB_PASSWORD=${CACHE_DB_PASSWORD}
      - CACHE_DB_PORT=${CACHE_DB_PORT}
      - POSTGRES_DB_HOSTNAME=${POSTGRES_DB_HOSTNAME}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
      - POSTGRES_DB_USER=${POSTGRES_DB_USER}
      - POSTGRES_DB_PASSWORD=${POSTGRES_DB_PASSWORD}
      - POSTGRES_DB_PORT=${POSTGRES_DB_PORT}
    ports:
      - ${REST_HTTP_PORT}:${REST_HTTP_PORT}
      - ${REST_HTTPS_PORT}:${REST_HTTPS_PORT}

    depends_on:
      - postgres
      - cache
    networks:
      - app




  postgres:
    container_name: ${POSTGRES_DB_CONTAINER_NAME}
    hostname: ${POSTGRES_DB_HOSTNAME}
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    volumes:
      - ./services/postgres/data:/var/lib/postgresql/data
      - ./services/postgres/entrypoint/init.sh:/docker-entrypoint-initdb.d/init.sh
    restart: unless-stopped
    ports:
      - ${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=0.5GB"
      - "-c"
      - "effective_cache_size=2GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=5GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    networks:
      - app

  cache:
    container_name: ${CACHE_DB_CONTAINER_NAME}
    hostname: ${CACHE_DB_HOSTNAME}
    build:
      context: ./services/redis
      dockerfile: Dockerfile
      args:
        - PASSWORD=${CACHE_DB_PASSWORD}
    restart: unless-stopped
    ports:
      - ${CACHE_DB_PORT}:${CACHE_DB_PORT}
    volumes:
      - ./services/redis/data:/data
    networks:
      - app

networks:
  app:
    driver: bridge
